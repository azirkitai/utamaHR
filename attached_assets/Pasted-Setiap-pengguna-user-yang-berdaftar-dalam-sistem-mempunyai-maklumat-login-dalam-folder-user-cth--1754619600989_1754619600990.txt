Setiap pengguna (user) yang berdaftar dalam sistem mempunyai maklumat login dalam folder user (cth: username, password, role). Dalam masa yang sama, setiap user perlu ada satu rekod penuh dalam folder employee yang menyimpan semua butiran pekerja (personal, contact, employment, compensation, family, dsb).

Sila pastikan:

Setiap data employee di-link-kan (di-relate) dengan user ID (user_id atau unique identifier) daripada folder user.

Contoh: Jika user id = 101, maka dalam folder employee pastikan setiap rekod pekerja ada field user_id: 101 atau gunakan ID yang sama. Jangan gunakan data loose yang tiada kaitan, mesti refer dengan unique user_id dari login.

2. Struktur Database/Tables untuk Employee Details (ikut navigation tab)
Berdasarkan navigation tab dalam page Employee Details, bina struktur table/database seperti berikut:

Contoh Struktur Database/Tables
User Table (user):

user_id (Primary key)

username

password (hashed)

role

email

status (active/inactive)

...etc

Employee Table (employee):

employee_id (Primary key)

user_id (Foreign key dari user)

full_name

nric

date_of_birth

gender

race

religion

marital_status

blood_type

nationality

education_level

status (employed/terminated/retired etc)

...etc

Employment Table:

employment_id

employee_id (Foreign key)

company

branch

designation

department

join_date

sign_date

employment_type

status

...etc

Contact Table:

contact_id

employee_id (Foreign key)

phone

mobile

email

address

emergency_contact_name

emergency_contact_phone

...etc

Family Table:

family_id

employee_id (Foreign key)

relation

name

gender

nric_passport

date_of_birth

phone

email

address

employment_status

oku_status

...etc

Compensation Table:

compensation_id

employee_id (Foreign key)

bank

account_number

account_type

branch

account_status

epf_number

socso_number

eis_number

tax_number

...etc

Document Table:

document_id

employee_id (Foreign key)

name

remarks

file_url / path

...etc

Equipment Table:

equipment_id

employee_id (Foreign key)

equipment_name

serial_number

issue_date

return_date

remarks

...etc

Leave Policy Table:

leave_policy_id

employee_id (Foreign key)

annual_leave

sick_leave

leave_approval

...etc

Claim Policy Table:

claim_policy_id

employee_id (Foreign key)

claim_type

claim_limit

claim_approval

...etc

Disciplinary Table:

disciplinary_id

employee_id (Foreign key)

incident_date

type

remarks

...etc

App Setting Table:
(Jika ada app-specific settings untuk pekerja, masukkan ikut keperluan)

3. Guideline Coding (untuk agent/developer)
JANGAN cipta employee yang tiada kaitan dengan user_id.

Untuk setiap pekerja baru, create user dahulu (login credentials), baru create employee dan pastikan simpan user_id sebagai foreign key dalam employee.

Fetch data mesti guna user_id untuk dapatkan maklumat penuh employee dari semua table yang berkaitan (join by employee_id/user_id).

Update/Delete juga mesti pastikan integrity antara user dan employee (jangan dibiarkan orphaned data).

Navigation dalam portal mesti refer ke table yang tepat mengikut tab yang pengguna klik (Personal Detail, Employment, Contact, Family Detail, Compensation, Document, Equipment, Leave Policy, Claim Policy, Disciplinary, App Setting).

4. Senang faham (Bahasa Melayu)
Pastikan setiap pekerja dalam sistem ada ID user yang unik.

Semua data pekerja dalam database mesti kaitkan dengan ID user tersebut.

Ikut semua tab dalam page "Employee Details", dan buat table/database untuk setiap maklumat (personal, employment, contact, family, compensation, document, equipment, dsb).

Jangan simpan data pekerja tanpa user_id yang sah.

Contoh Prompt (boleh copy-paste)
Sila pastikan struktur database HRMS mempunyai 2 entiti utama: user (untuk login credentials) dan employee (untuk maklumat pekerja).

Link-kan setiap rekod dalam folder employee dengan ID dari folder user (cth: user_id).

Semua data pekerja dalam table mesti berkait dengan user_id.

Ikut navigation tab dalam page "Employee Details" seperti: Personal Detail, Employment, Contact, Family, Compensation, Document, Equipment, Leave Policy, Claim Policy, Disciplinary, App Setting. Buat table atau sub-table untuk setiap maklumat.

Setiap table ada foreign key kepada employee_id/user_id.

Jangan cipta data pekerja tanpa user_id yang sah.

Semua fungsi tambah, update, padam, fetch data mesti ikut integrity dan relational database structure.

Pastikan tiada data orphan. Setiap fungsi dalam sistem mesti refer pada user_id.

Jika ada soalan lanjutan atau nak tambah field, boleh inform lagi!









Ask ChatGPT
You said:







saya tambah lagi gambar yang tak cukup. dan relate sekali semua

ChatGPT said:
Berikut adalah arahan lengkap yang anda boleh gunakan untuk agent/pembangun yang akan membina database dan sistem backend (contohnya di Replit) supaya semua maklumat pekerja dapat diurus, setiap data employee akan terikat/berkaitan dengan data user/login.

Arahan Kepada Agent: Struktur Database Employee & User
Objektif:
Setiap maklumat pekerja (employee) mesti disimpan dalam table/database yang lengkap dan berkait dengan user (login) yang betul. Semua modul/section dalam navigation perlu ada table sendiri dan terhubung dengan ID user.

Struktur Folder dan Table (Minimum Requirement)
1. Folder Structure
users/ – simpan maklumat login user (username, password, role, email)

employees/ – simpan semua data maklumat pekerja (termasuk details, contact, compensation dsb)

Setiap employee dikaitkan dengan userID dari folder users

2. User Table/Collection
user_id (unique, auto)

username

password_hash

email

role (admin, hr, staff, etc)

is_active

3. Employee Table/Collection (wajib ada user_id untuk foreign key/relationship)
employee_id (unique, auto)

user_id (rujuk ke table users)

personal_detail

employment_detail

contact_detail

family_detail

compensation_detail

document_list

equipment_list

leave_policy_list

claim_policy_list

disciplinary_list

dll ikut navigation tab yang anda sediakan dalam page employee detail

4. Field Wajib Untuk Setiap Table
Personal Detail

Nama, NRIC, tarikh lahir, jantina, agama, status perkahwinan, warganegara, status bumi, darah, pendidikan, jumlah tanggungan

Employment

No staf, syarikat, jawatan, lokasi cawangan, tarikh mula, status, OKU, department

Contact

Phone number, email, alamat, contact emergency

Family Detail

Senarai tanggungan (nama, hubungan, umur, phone, email, pekerjaan/OKU status)

Compensation

Maklumat bank, nombor akaun, jenis akaun, cawangan, status akaun

KWSP (no, start date), SOCSO (no, category, start age), EIS, Income Tax, Relief Info

Document

Senarai dokumen (nama file, remarks, file upload)

Equipment

Senarai peralatan (jenis, details, tarikh terima, tarikh return, file upload)

Leave Policy

Jenis cuti, entitlement, balance, remarks

Claim Policy

Jenis claim, had tahunan, baki, remarks

Disciplinary

Isu, details, tarikh, tindakan, dokumen sokongan

5. Relasi User & Employee
Setiap user_id hanya boleh access dan update maklumat employee yang berkaitan dengan user_id tersebut.

Pastikan setiap kali login, semua data yang dipaparkan, diupdate, disimpan, dan dicapai adalah berdasarkan user_id.

6. Tambahan (Feature Khusus)
Setiap section/tab navigation mesti ada table/database collection tersendiri, dan semua data dikaitkan ke employee_id (dan secara tidak langsung user_id).

Contoh: Jika pekerja update maklumat keluarga, data akan simpan dalam family_detail dengan field employee_id dan data relation lain.

Contoh Prompt Untuk Agent/Pembangun (Dalam Bahasa Melayu & Mudah Faham):
"Bina satu sistem database di mana setiap pekerja mempunyai maklumat lengkap seperti dalam navigation tab pada page employee details (rujuk screenshot). Sediakan table/collection untuk setiap jenis maklumat seperti personal detail, employment, contact, family, compensation, document, equipment, leave policy, claim policy, disciplinary dan sebagainya. Setiap data pekerja mesti berkait dengan user_id daripada table users (login user). Bila pekerja login, hanya maklumat pekerja berkaitan dengan user tersebut akan dipaparkan dan boleh diubah. Pastikan juga semua data employee ada field foreign key user_id supaya data boleh di-link dan disusun dengan tepat antara user dan pekerja. Data dalam table mesti ikut field yang telah ditunjukkan dalam page navigation dan popup form di dalam screenshot. Setiap kali user update, simpan atau akses data, mesti ikut user_id yang berkaitan."

Contoh Skema Table Ringkas:
users

user_id	username	password	email	role

employees
| employee_id | user_id | name | nric | ... |

family_detail
| family_id | employee_id | name | relation | ... |

compensation
| compensation_id | employee_id | bank | epf | ... |

Penjelasan Untuk Agent
Gunakan satu user_id yang jadi "master key" untuk link semua table berkaitan pekerja.

Semua navigation/tab dalam page employee details kena jadi table/collection sendiri, dan setiap data pekerja wajib ada reference kepada employee_id dan user_id.

Data user (login) dan data pekerja wajib konsisten supaya user boleh access maklumat sendiri sahaja.

Setiap kali buat, update, atau access data, filter ikut user_id.

Jika anda perlukan version Bahasa Inggeris atau mahu saya susunkan dalam bentuk fail, maklumkan sahaja!








