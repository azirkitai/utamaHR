Tujuan: Kemas margin A4 & pastikan SEMUA elemen (header, table header, baris jadual, footer) duduk dalam margin. JANGAN ubah/ tapis data. Multi-employee view kekal.

1) Tetapkan margin standard
// 1mm = 2.83465 pt
const mm = (n:number) => n * 2.83465;

// A4 portrait margins
const topMargin    = mm(28); // 28 mm
const bottomMargin = mm(22); // 22 mm
const leftMargin   = mm(18); // 18 mm
const rightMargin  = mm(18); // 18 mm

const contentWidth  = width  - leftMargin - rightMargin;
const contentHeight = height - topMargin  - bottomMargin;


Gantikan nilai margin lama anda dengan yang di atas.

2) Header: kekalkan di dalam margin (jangan edge-to-edge)

Pastikan semua drawRectangle/drawText dalam drawHeader pakai leftMargin & contentWidth.

Contoh (OK):

const headerH = mm(28);
const headerY = height - topMargin - headerH;

page.drawRectangle({
  x: leftMargin,
  y: headerY,
  width: contentWidth,
  height: headerH,
  color: rgb(0.10,0.20,0.40),
});

page.drawText(companyName, {
  x: leftMargin + 6,
  y: headerY + headerH - 14,
  size: 12,
  font: boldFont,
  color: rgb(1,1,1),
});


Jika center tajuk guna kiraan (width - textWidth)/2 masih OK selagi tajuk berada di dalam bar header yang sudah berada dalam margin.

3) Table header: tukar 2 baris sahaja (elak tepi kertas)

SEBELUM (salah):

page.drawRectangle({ x: 0, y: yPos - tableHeight, width: width, height: tableHeight, color: rgb(0.1,0.3,0.6) });
let currentX = leftMargin; // <-- kadang masih 0 di kod asal


SELEPAS (betul):

page.drawRectangle({
  x: leftMargin,
  y: yPos - tableHeight,
  width: contentWidth,
  height: tableHeight,
  color: rgb(0.1,0.3,0.6),
});

let currentX = leftMargin; // mula dari margin kiri


Nota: Hanya 2 perubahan: x: 0 ➜ leftMargin dan width: width ➜ contentWidth. Lain kekal.

4) Baris jadual: kekalkan di dalam content area

Pastikan semua kotak baris gunakan leftMargin & contentWidth:

page.drawRectangle({
  x: leftMargin,
  y: rowY - rowH,
  width: contentWidth,
  height: rowH,
  color: (rowIndex % 2 ? rgb(0.98,0.98,0.98) : undefined),
  borderColor: rgb(0.8,0.8,0.8),
  borderWidth: 0.5,
});


Teks sel bermula dari x = leftMargin + padding dan bergerak mengikut columnWidths.

5) Jumlah lebar kolum mesti = contentWidth

Sahkan jumlah columnWidths = contentWidth.
Contoh (segi empat penjuru, jangan ubah bilangan kolum/data—hanya saiz):

const columnWidths = [30, 150, 70, 55, 55, 55, 55, 65, 75]; 
// Jika jumlah ≠ contentWidth, laraskan proporsional sehingga:
// columnWidths.reduce((a,b)=>a+b,0) === contentWidth


Jika font kecil (cth 8–9pt) diperlukan supaya muat, tukar size sahaja (jangan ubah kandungan):

const headerFontSize = 9;
const bodyFontSize   = 9;

6) Pagination & y-boundaries

Semak sebelum melukis baris:

const needNewPage = (y - rowH) < (bottomMargin + mm(18)); // 18mm ruang bawah selamat
if (needNewPage) {
  page = pdf.addPage();
  y = height - topMargin;
  // Ulang table header di halaman baru (guna API sedia ada)
  drawTableHeader(page, y);
  y -= tableHeaderHeight;
}


Ini susun atur sahaja, tidak sentuh logik data.

7) Footer dalam margin
page.drawText(footerLine, {
  x: leftMargin,
  y: bottomMargin - 10, // masih dalam kawasan margin
  size: 8,
  font,
  color: rgb(0.2,0.2,0.2),
});

Checklist (untuk cepat verify)

 Margin A4: 28/22/18/18 mm dipakai untuk semua halaman.

 Header berada sepenuhnya dalam leftMargin..rightMargin.

 Table header guna x:leftMargin & width:contentWidth (bukan 0 & width).

 Baris jadual (striping/border) mula di leftMargin, lebar contentWidth.

 Jumlah columnWidths = contentWidth; tiada overflow/terpotong.

 Footer berada dalam margin bawah.

 Tiada perubahan pada logik/data—semua pekerja kekal dipaparkan seperti sedi