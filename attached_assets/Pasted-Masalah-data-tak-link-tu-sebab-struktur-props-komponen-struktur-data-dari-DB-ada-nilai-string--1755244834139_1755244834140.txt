Masalah “data tak link” tu sebab struktur props komponen ≠ struktur data dari DB + ada nilai string (contoh “3,500.00”) yang tak diparse ke nombor. Dalam PDF yang anda upload, “Basic Salary” keluar RM 0.00 tapi TOTAL GROSS betul (RM 3000) — tanda income.basicSalary tidak diisi walaupun jumlah kasar ada nilainya. 

Di bawah ni saya bagi patch siap pakai supaya:

Apa jua bentuk data DB boleh di-map ke props komponen,

Semua amaun diparse & diformat betul,

Item “Basic Salary / Overtime / etc.” boleh datang sama ada sebagai medan tunggal atau dalam array.

1) Util nombor (parse & format)
// utils/amount.ts
export const toNum = (v: unknown): number => {
  if (v === null || v === undefined) return 0;
  if (typeof v === "number") return v;
  // buang koma/space/RM
  const n = Number(String(v).replace(/[^\d.-]/g, ""));
  return Number.isFinite(n) ? n : 0;
};

export const toFixed2 = (v: unknown) =>
  toNum(v).toFixed(2);

2) Mapper: DB → props komponen anda

Guna ni di tempat anda fetch payroll. Ia “normalize” data sama ada datang dalam object fields atau array.

// mappers/payslip.ts
import { toNum } from "../utils/amount";

// Contoh bentuk data DB *fleksibel* (anda boleh guna mana-mana kunci yang ada)
type DbItem = { label: string; amount: number | string };
type DbSlip = {
  employee: { fullName: string; ic?: string; position?: string };
  period: { month: string; year: number };
  company?: { name?: string; regNumber?: string; address?: string };
  // EITHER object fields...
  income?: {
    basicSalary?: number | string;
    overtime?: number | string;
    fixedAllowance?: number | string;
    additional?: DbItem[];
  };
  deductions?: {
    epfEmployee?: number | string;
    socsoEmployee?: number | string;
    eisEmployee?: number | string;
    pcb?: number | string;
    additional?: DbItem[];
  };
  contributions?: {
    epfEmployer?: number | string;
    socsoEmployer?: number | string;
    eisEmployer?: number | string;
  };
  ytd?: {
    employee?: { epf?: number | string; socso?: number | string; eis?: number | string; pcb?: number | string };
    employer?: { epf?: number | string; socso?: number | string; eis?: number | string };
  };
  // ...OR arrays (jika sistem anda simpan begini)
  incomesArray?: DbItem[];
  deductionsArray?: DbItem[];
  employerContribArray?: DbItem[];
  ytdEmployeeArray?: DbItem[];
  ytdEmployerArray?: DbItem[];
};

export function mapDbToPayslipProps(db: DbSlip) {
  // 1) INCOME
  const incomeList: DbItem[] = [];
  if (db.incomesArray?.length) {
    incomeList.push(...db.incomesArray);
  } else if (db.income) {
    if (db.income.basicSalary !== undefined) incomeList.push({ label: "Basic Salary", amount: db.income.basicSalary });
    if (db.income.overtime) incomeList.push({ label: "Overtime", amount: db.income.overtime });
    if (db.income.fixedAllowance) incomeList.push({ label: "FIXED ALLOWENCE", amount: db.income.fixedAllowance });
    if (db.income.additional?.length) incomeList.push(...db.income.additional);
  }

  // 2) DEDUCTION
  const deductionList: DbItem[] = [];
  if (db.deductionsArray?.length) {
    deductionList.push(...db.deductionsArray);
  } else if (db.deductions) {
    if (db.deductions.epfEmployee) deductionList.push({ label: "EPF Employee", amount: db.deductions.epfEmployee });
    if (db.deductions.socsoEmployee) deductionList.push({ label: "SOCSO Employee", amount: db.deductions.socsoEmployee });
    if (db.deductions.eisEmployee) deductionList.push({ label: "EIS Employee", amount: db.deductions.eisEmployee });
    if (db.deductions.pcb) deductionList.push({ label: "MTD/PCB", amount: db.deductions.pcb });
    if (db.deductions.additional?.length) deductionList.push(...db.deductions.additional);
  }

  // 3) Employer contrib
  const employerContrib: DbItem[] = db.employerContribArray?.length
    ? db.employerContribArray
    : [
        db.contributions?.epfEmployer !== undefined && { label: "EPF EMPLOYER", amount: db.contributions?.epfEmployer },
        db.contributions?.socsoEmployer !== undefined && { label: "SOCSO EMPLOYER", amount: db.contributions?.socsoEmployer },
        db.contributions?.eisEmployer !== undefined && { label: "EIS EMPLOYER", amount: db.contributions?.eisEmployer },
      ].filter(Boolean) as DbItem[];

  // 4) YTD
  const ytdEmployee: DbItem[] = db.ytdEmployeeArray?.length
    ? db.ytdEmployeeArray
    : [
        db.ytd?.employee?.epf !== undefined && { label: "EPF Employee", amount: db.ytd?.employee?.epf },
        db.ytd?.employee?.socso !== undefined && { label: "SOCSO Employee", amount: db.ytd?.employee?.socso },
        db.ytd?.employee?.eis !== undefined && { label: "EIS Employee", amount: db.ytd?.employee?.eis },
        db.ytd?.employee?.pcb !== undefined && { label: "PCB/MTD", amount: db.ytd?.employee?.pcb },
      ].filter(Boolean) as DbItem[];

  const ytdEmployer: DbItem[] = db.ytdEmployerArray?.length
    ? db.ytdEmployerArray
    : [
        db.ytd?.employer?.epf !== undefined && { label: "EPF Employer", amount: db.ytd?.employer?.epf },
        db.ytd?.employer?.socso !== undefined && { label: "SOCSO Employer", amount: db.ytd?.employer?.socso },
        db.ytd?.employer?.eis !== undefined && { label: "EIS Employer", amount: db.ytd?.employer?.eis },
      ].filter(Boolean) as DbItem[];

  // 5) Kira jumlah jika tidak diberi
  const gross = incomeList.reduce((s, x) => s + toNum(x.amount), 0);
  const totalDeduction = deductionList.reduce((s, x) => s + toNum(x.amount), 0);
  const netPay = gross - totalDeduction;

  return {
    employee: db.employee,
    document: db.period,
    company: db.company ?? {},
    payroll: {
      incomes: incomeList,
      deductions: deductionList,
      gross,
      totalDeduction,
      netPay,
      employerContrib,
      ytdEmployee,
      ytdEmployer,
    },
  };
}

3) Guna mapper bila render PDF
// contoh di React/Node sebelum render <PayslipPDFDocument/>
import { PayslipPDFDocument } from "./PayslipPDFDocument";
import { mapDbToPayslipProps } from "./mappers/payslip";

// dbSlip = data sebenar dari database anda
const props = mapDbToPayslipProps(dbSlip);

<PayslipPDFDocument
  {...props}
  generated={new Date().toLocaleDateString("en-GB")}
/>;


Dengan cara ni, walaupun DB anda simpan “Basic Salary” di tempat lain atau dalam array, komponen tetap dapat nilai bukan 0 dan “Basic Salary” tak lagi jadi RM 0.00.

4) Kemaskan komponen (jangan .toFixed() atas undefined)

Dalam komponen sedia ada anda, tukar tempat yang guna toFixed terus kepada parser:

// ganti
<Text>RM {(income?.basicSalary || 0).toFixed(2)}</Text>

// dengan
import { toFixed2 } from "../utils/amount";
<Text>RM {toFixed2(income?.basicSalary)}</Text>


Dan untuk jumlah:

<Text>RM {toFixed2(payroll.grossPay)}</Text>

5) Debug pantas (sekali lihat)

Tambah log sebelum render:

console.table([
  ["basicSalary", toNum(income?.basicSalary)],
  ["overtime", toNum(income?.overtime)],
  ["fixedAllowance", toNum(income?.fixedAllowance)],
  ["gross", toNum(payroll.grossPay)],
  ["totalDeduction", toNum(payroll.totalDeductions)],
  ["netPay", toNum(payroll.netPay)],
]);


Kalau basicSalary keluar 0 sedangkan gross ada nilai, maknanya data DB tidak masuk ke income.basicSalary → mapper di atas akan selesaikan.